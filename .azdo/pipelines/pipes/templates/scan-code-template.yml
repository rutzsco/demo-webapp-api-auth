# ----------------------------------------------------------------------------------------------------
# Code Scanning Template
# ----------------------------------------------------------------------------------------------------
# GitHub Advanced Security For Azure DevOps
# To enable this, you must enable GHAzDO in your Azure DevOps Organization
# https://docs.github.com/en/github-ae@latest/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/configuring-advanced-setup-for-code-scanning
# ----------------------------------------------------------------------------------------------------
# Microsoft Secure DevOps Scan
# To enable this, you must add Azure DevOps Extension to your Azure DevOps Organization
# See https://marketplace.visualstudio.com/items?itemName=ms-securitydevops.microsoft-security-devops-azdevops
#
# Details: https://github.com/microsoft/security-devops-action/blob/main/action.yml
# Input Parameters:
#   categories:
#     CSV of analyzer categories to run. Values: code,artifacts,IaC,containers (Defaults to all)
#   tools:
#     CSV of analyzer tools to run. Example antimalware,bandit,binskim,eslint,templateanalyzer,terrascan,trivy
#       AntiMalware: code, artifacts  (>>> doesn't work when run on ubuntu agent...???)
#       Bandit: python
#       BinSkim: binary 
#       ESlint: JavaScript
#       Template Analyzer:	IaC, ARM templates, Bicep files
#       Terrascan: IaC, Terraform (HCL2), Kubernetes (JSON/YAML), Helm v3, Kustomize, Dockerfiles, Cloudformation
#       Trivy:	container images, file systems, git repositories
# ----------------------------------------------------------------------------------------------------
# PSRule is a static analysis tool for Bicep Files
# https://marketplace.visualstudio.com/items?itemName=bewhite.psrule-vscode
# To view the PSRule Output, add the SARIF SAST Scans Tab extension to your organization
# https://marketplace.visualstudio.com/items?itemName=sariftools.scans
# ----------------------------------------------------------------------------------------------------
parameters:
- name: environmentName
  default: 'DEV'
- name: runPsRuleScan
  default: 'false'
- name: runGHAzDOScan
  default: 'false'

- name: runDevSecOpsScan
  default: 'none'
  type: string
- name: workingDirectoryCode
  default: '/src/myProject'
- name: workingDirectoryInfra
  default: '/infra/bicep'
- name: workingDirectoryIgnore
  default: '/Docs'
- name: continueOnScanError
  default: 'true'

# ----------------------------------------------------------------------------------------------------
jobs:
- deployment: CodeScanDeployment
  displayName: Initialize Code Scans
  environment: ${{ parameters.environmentName }}

# ----------------------------------------------------------------------------------------------------
# GHAzDO Scanner
# ----------------------------------------------------------------------------------------------------
- ${{ if eq(lower(parameters.runGHAzDOScan), 'true') }}:
  - job: GHAzDOScanJob
    displayName: GHAzDO Scan Job
    steps:
    - task: CmdLine@2
      inputs:
        script: |
          echo "parameters.continueOnScanError=${{ parameters.continueOnScanError }}"
          echo "parameters.workingDirectoryCode=${{ parameters.workingDirectoryCode }}"
          echo "parameters.workingDirectoryIgnore=${{ parameters.workingDirectoryIgnore }}"
          echo "Directory Listing for $(Pipeline.Workspace)"
          tree $(Pipeline.Workspace)
      displayName: 'Display Variables and Tree'
      continueOnError: true
          # dir $(Pipeline.Workspace) /s

    - task: AdvancedSecurity-Codeql-Init@1
      inputs:
        languages: 'csharp'
        querysuite: security-extended
      #   codeqlpathstoinclude: ${{ parameters.workingDirectoryCode }}
      #   codeqlpathstoignore: ${{ parameters.workingDirectoryIgnore }}
      #   sourcesfolder: ${{ parameters.workingDirectoryCode }}

    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '${{ parameters.workingDirectoryCode }}/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build project test'
      inputs:
        projects: '${{ parameters.workingDirectoryCode }}/*.csproj'
        arguments: '--output publish_output --configuration Release'

    - task: AdvancedSecurity-Dependency-Scanning@1
      continueOnError: ${{ eq(parameters.continueOnScanError, 'true') }}

    - task: AdvancedSecurity-Codeql-Autobuild@1

    - task: AdvancedSecurity-Codeql-Analyze@1
      continueOnError: ${{ eq(parameters.continueOnScanError, 'true') }}

    - task: AdvancedSecurity-Publish@1 
      continueOnError: ${{ eq(parameters.continueOnScanError, 'true') }}

# ----------------------------------------------------------------------------------------------------
- job: SecurityScanJob
  displayName: Run MS SecDevOps Scans
  variables:
    - name: continueAfterScanErrors
      value: ${{ eq(parameters.continueOnScanError, 'true') }}
  steps:
  - ${{ if eq(lower(parameters.runDevSecOpsScan), 'true') }}:
    - bash: |
        echo "parameters.runDevSecOpsScan=${{parameters.runDevSecOpsScan}}"
        echo "parameters.workingDirectoryCode=${{parameters.workingDirectoryCode}}"
        echo "parameters.workingDirectoryInfra=${{parameters.workingDirectoryInfra}}"
        echo "parameters.workingDirectoryIgnore=${{parameters.workingDirectoryIgnore}}"
        echo "continueAfterScanErrors=$(continueAfterScanErrors)"
        echo "parameters.continueOnScanError=${{parameters.continueOnScanError}}"
        echo "Directory Listing for $(Pipeline.Workspace)"
        tree $(Pipeline.Workspace)
      displayName: 'Display Variables'
      continueOnError: true
    - task: UseDotNet@2
      displayName: 'Use dotnet 3.1.x'
      inputs:
        version: 3.1.x
    - task: UseDotNet@2
      displayName: 'Use dotnet 5.0.x'
      inputs:
        version: 5.0.x
    - task: UseDotNet@2
      displayName: 'Use dotnet 6.0'
      inputs:
        version: 6.0.x
    - task: MicrosoftSecurityDevOps@1
      displayName: Run Everything MS SecDevOps Scan
      continueOnError: ${{ eq(parameters.continueOnScanError, 'true') }}
    - task: CmdLine@2
      inputs:
        script: |
          echo "Directory of pipeline workspace: $(Pipeline.Workspace)"
          tree $(Pipeline.Workspace)
      displayName: 'Display Files'
      continueOnError: true
    - task: PublishBuildArtifacts@1
      displayName: Publish Scan Results
      inputs:
        pathToPublish: '$(System.ArtifactsDirectory)/.gdn/msdo.sarif'
        artifactName: 'scan_everything'
      continueOnError: ${{ eq(parameters.continueOnScanError, 'true') }}

# ----------------------------------------------------------------------------------------------------
# PSRule Bicep Scan
# ----------------------------------------------------------------------------------------------------
- ${{ if eq(lower(parameters.runPsRuleScan), 'true') }}:
  - job: BicepScanJob
    displayName: PSRule Bicep Scan Job
    steps:
    - task: ps-rule-assert@2
      displayName: Run PSRule Analysis
      inputs:
        modules: 'PSRule.Rules.Azure'
        outputFormat: Sarif
        outputPath: reports/PSRuleOutput.sarif
      continueOnError: ${{ eq(parameters.continueOnScanError, 'true') }}

    - task: PublishBuildArtifacts@1
      displayName: Publish PSRule Results
      inputs:
        pathToPublish: reports/PSRuleOutput.sarif
        artifactName: PSRule
      continueOnError: ${{ eq(parameters.continueOnScanError, 'true') }}
